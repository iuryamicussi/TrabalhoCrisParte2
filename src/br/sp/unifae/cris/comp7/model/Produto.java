package br.sp.unifae.cris.comp7.model;
// Generated 01/05/2017 22:04:39 by Hibernate Tools 4.3.1

import br.sp.unifae.cris.comp7.model.dao.DAOProduto;
import br.sp.unifae.cris.comp7.utils.excecao.MinhaExcecao;
import br.sp.unifae.cris.comp7.utils.excecao.TiposDeMinhaExcecao;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Produto generated by hbm2java
 */
public class Produto implements java.io.Serializable {

    private Integer id;
    private String nome;
    private Float precoCusto;
    private Float precoVenda;
    private Float estoqueAnterior;
    private Float estoqueEntrada;
    private Float estoqueSaida;
    private Set entradaProdutos = new HashSet(0);
    private Set vendaProdutos = new HashSet(0);

    public Produto() {
    }

    public Produto(String nome, Float precoCusto, Float precoVenda, Float estoqueAnterior, Float estoqueEntrada, Float estoqueSaida, Set entradaProdutos, Set vendaProdutos) throws Exception {
        setNome(nome);
        setPrecoCusto(precoCusto);
        setPrecoVenda(precoVenda);
        setEstoqueAnterior(estoqueAnterior);
        setEstoqueEntrada(estoqueEntrada);
        setEstoqueSaida(estoqueSaida);
        setEntradaProdutos(entradaProdutos);
        setVendaProdutos(vendaProdutos);
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) throws Exception {
        if(id < 0)
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero,"Id");
        this.id = id;
    }

    public String getNome() {
        return this.nome;
    }

    public void setNome(String nome) throws Exception {
        if(nome == null || nome.isEmpty() || "".equals(nome)){
            new MinhaExcecao(TiposDeMinhaExcecao.CampoVazio,"Nome");
        }
        this.nome = nome;
    }

    public Float getPrecoCusto() {
        return this.precoCusto;
    }

    public void setPrecoCusto(Float precoCusto) throws Exception {
        if(precoCusto < 0){
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero, "Preço de Custo");
        }
        this.precoCusto = precoCusto;
    }

    public Float getPrecoVenda() {
        return this.precoVenda;
    }

    public void setPrecoVenda(Float precoVenda) throws Exception {
        if(precoCusto < 0){
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero, "Preço de Venda");
        }
        this.precoVenda = precoVenda;
    }

    public Float getEstoqueAnterior() {
        return this.estoqueAnterior;
    }

    public void setEstoqueAnterior(Float estoqueAnterior) throws Exception {
        if(precoCusto < 0){
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero, "Estoque Anterior");
        }
        this.estoqueAnterior = estoqueAnterior;
    }

    public Float getEstoqueEntrada() {
        return this.estoqueEntrada;
    }

    public void setEstoqueEntrada(Float estoqueEntrada) throws Exception {
        if(precoCusto < 0){
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero, "Estoque Entrada");
        }
        this.estoqueEntrada = estoqueEntrada;
    }

    public Float getEstoqueSaida() {
        return this.estoqueSaida;
    }

    public void setEstoqueSaida(Float estoqueSaida) throws Exception {
        if(precoCusto < 0){
            new MinhaExcecao(TiposDeMinhaExcecao.ValorMenorQueZero, "Estoque Saída");
        }
        this.estoqueSaida = estoqueSaida;
    }

    public Set getEntradaProdutos() {
        return this.entradaProdutos;
    }

    public void setEntradaProdutos(Set entradaProdutos) {
        this.entradaProdutos = entradaProdutos;
    }

    public Set getVendaProdutos() {
        return this.vendaProdutos;
    }

    public void setVendaProdutos(Set vendaProdutos) {
        this.vendaProdutos = vendaProdutos;
    }

    public void armazenar() {
        DAOProduto dAOCliente = new DAOProduto();
        dAOCliente.armazenar(this);
    }

    public void alterar() {
        DAOProduto dAOCliente = new DAOProduto();
        dAOCliente.alterar(this);
    }

    public void excluir() {
        DAOProduto dAOCliente = new DAOProduto();
        dAOCliente.excluir(this);
    }

    public List listar() {
        DAOProduto dAOCliente = new DAOProduto();
        return dAOCliente.listar();
    }

    public float getEstoqueAtual() {
        return this.estoqueAnterior + this.estoqueEntrada - this.estoqueSaida;
    }
}
